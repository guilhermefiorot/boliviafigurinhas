swagger: "2.0"
info:
  description: "API documentation for the Bolivia Figurinhas Backend."
  version: "1.0.0"
  title: "Bolivia Figurinhas Backend API"
host: "localhost:8080"
basePath: "/api/v1"
schemes:
  - "http"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "Enter 'Bearer' [space] and then your token in the text input below.\n\nExample: \"Bearer abcdef12345\""
paths:
  /register:
    post:
      tags:
        - "User"
      summary: "Register a new user"
      operationId: "registerUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
        400:
          description: "Invalid input"

  /login:
    post:
      tags:
        - "User"
      summary: "User login"
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Successful login"
        401:
          description: "Invalid credentials"

  /forgot_password:
    post:
      tags:
        - "User"
      summary: "Forgot password"
      operationId: "forgotPassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User email and new password"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Password updated"
        404:
          description: "User not found"

  /users:
    get:
      tags:
        - "User"
      summary: "Get all users"
      security:
        - Bearer: []
      produces:
        - "application/json"
      responses:
        200:
          description: "List of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        401:
          description: "Unauthorized"

  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Get user by ID"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "User found"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    
    put:
      tags:
        - "User"
      summary: "Update user"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
        404:
          description: "User not found"
    
    delete:
      tags:
        - "User"
      summary: "Delete user"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        204:
          description: "User deleted"
        404:
          description: "User not found"

  /products:
    get:
      tags:
        - "Product"
      summary: "List all products"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
    
    post:
      tags:
        - "Product"
      summary: "Create new product"
      security:
        - Bearer: []
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product created"
        400:
          description: "Invalid input"

  /products/{id}:
    get:
      tags:
        - "Product"
      summary: "Get product details"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Product found"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Product not found"
    
    put:
      tags:
        - "Product"
      summary: "Update product"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        200:
          description: "Product updated"
        404:
          description: "Product not found"
    
    delete:
      tags:
        - "Product"
      summary: "Delete product"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        204:
          description: "Product deleted"
        404:
          description: "Product not found"

  /cart:
    get:
      tags:
        - "Cart"
      summary: "Get user's cart"
      security:
        - Bearer: []
      produces:
        - "application/json"
      responses:
        200:
          description: "Cart retrieved successfully"
          schema:
            $ref: "#/definitions/Cart"
    
    post:
      tags:
        - "Cart"
      summary: "Add item to cart"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CartItem"
      responses:
        201:
          description: "Item added to cart"
        400:
          description: "Invalid input"
    
    delete:
      tags:
        - "Cart"
      summary: "Remove item from cart"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              product_id:
                type: "integer"
      responses:
        204:
          description: "Item removed from cart"
        404:
          description: "Item not found in cart"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"
      isAdmin:
        type: "boolean"
      endereco:
        type: "string"
      cidade:
        type: "string"
      cep:
        type: "string"
      pais:
        type: "string"
      telefone:
        type: "string"
      cpf:
        type: "string"

  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      image:
        type: "string"
      price:
        type: "number"
        format: "float"
      condition:
        type: "number"
        format: "float"
        description: "Product condition rating from 0 to 10"
      rarity:
        type: "string"
        enum: ["Common", "Uncommon", "Rare", "Epic", "Legendary"]
        description: "Product rarity level"
      quantity:
        type: "integer"
        description: "Number of items available in stock"

  CartItem:
    type: "object"
    properties:
      product_id:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
      single_value:
        type: "number"
        format: "float"
      total_value:
        type: "number"
        format: "float"

  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CartItem"
      total_value:
        type: "number"
        format: "float"